/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import sk.stu.fiit.logic.Customer;
import sk.stu.fiit.logic.InputSanitizer;
import sk.stu.fiit.logic.*;

/**
 *
 * @author PeterSmrecek
 */
public class Main_Window extends javax.swing.JFrame {

    /**
     * Creates new form Main_Window
     */
    public Main_Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panTables = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        panButtons = new javax.swing.JPanel();
        btnNewCustomer = new javax.swing.JButton();
        btnEditCustomer = new javax.swing.JButton();
        btnNewItem = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();
        btnCreateInvoice = new javax.swing.JButton();
        btnShowInvoice = new javax.swing.JButton();
        mbMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miNewCustomer = new javax.swing.JMenuItem();
        miNewItem = new javax.swing.JMenuItem();
        sepFile = new javax.swing.JPopupMenu.Separator();
        miQuit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        miEditCustomer = new javax.swing.JMenuItem();
        miEditItem = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miTests = new javax.swing.JMenuItem();
        miInfo = new javax.swing.JMenuItem();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fakturačný systém");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panTables.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabuľka zákazníkov"));

        tblCustomers.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Adresa", "Obec", "PSČ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCustomers);

        panTables.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 630, 130));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabuľka tovarov"));

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Názov", "Popis", "Cena"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblItems);

        panTables.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 630, 120));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabuľka faktúr"));

        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Dátum", "Suma"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblInvoices);

        panTables.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 630, 120));

        getContentPane().add(panTables, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 490));

        panButtons.setLayout(new javax.swing.BoxLayout(panButtons, javax.swing.BoxLayout.LINE_AXIS));

        btnNewCustomer.setText("Nový zákazník");
        btnNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCustomerActionPerformed(evt);
            }
        });
        panButtons.add(btnNewCustomer);

        btnEditCustomer.setText("Úprava zákazníka");
        btnEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCustomerActionPerformed(evt);
            }
        });
        panButtons.add(btnEditCustomer);

        btnNewItem.setText("Nový tovar");
        btnNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewItemActionPerformed(evt);
            }
        });
        panButtons.add(btnNewItem);

        btnEditItem.setText("Úprava tovaru");
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });
        panButtons.add(btnEditItem);

        btnCreateInvoice.setText("Vytvoriť faktúru");
        btnCreateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateInvoiceActionPerformed(evt);
            }
        });
        panButtons.add(btnCreateInvoice);

        btnShowInvoice.setText("Zobraziť faktúru");
        btnShowInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInvoiceActionPerformed(evt);
            }
        });
        panButtons.add(btnShowInvoice);

        getContentPane().add(panButtons, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 670, 720, 30));

        menuFile.setText("Súbor");

        miNewCustomer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miNewCustomer.setText("Nový zákazník");
        miNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewCustomerActionPerformed(evt);
            }
        });
        menuFile.add(miNewCustomer);

        miNewItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miNewItem.setText("Nový tovar");
        miNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewItemActionPerformed(evt);
            }
        });
        menuFile.add(miNewItem);
        menuFile.add(sepFile);

        miQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miQuit.setText("Koniec");
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitActionPerformed(evt);
            }
        });
        menuFile.add(miQuit);

        mbMain.add(menuFile);

        menuEdit.setText("Úpravy");

        miEditCustomer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miEditCustomer.setText("Úprava zákazníka");
        miEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditCustomerActionPerformed(evt);
            }
        });
        menuEdit.add(miEditCustomer);

        miEditItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miEditItem.setText("Úprava tovaru");
        miEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditItemActionPerformed(evt);
            }
        });
        menuEdit.add(miEditItem);

        mbMain.add(menuEdit);

        menuHelp.setText("Pomocník");

        miTests.setText("Vzor");
        miTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTestsActionPerformed(evt);
            }
        });
        menuHelp.add(miTests);

        miInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miInfo.setText("Info");
        miInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInfoActionPerformed(evt);
            }
        });
        menuHelp.add(miInfo);

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        menuHelp.add(miAbout);

        mbMain.add(menuHelp);

        setJMenuBar(mbMain);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private Lists lists = new Lists();
    
    private void miQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
        // TODO add your handling code here:
        
        
        int result = JOptionPane.showConfirmDialog(rootPane, 
                "Naozaj si prajete ukončiť aplikáciu?", "Koniec", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if (result == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_miQuitActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        // TODO add your handling code here:
        
        About frmAbout = new About();
        frmAbout.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    private void miNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewItemActionPerformed
        // TODO add your handling code here:
        
        newItem();
    }//GEN-LAST:event_miNewItemActionPerformed

    private void miInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInfoActionPerformed
        // TODO add your handling code here:
        
        Info frmInfo = new Info();
        frmInfo.setVisible(true);
    }//GEN-LAST:event_miInfoActionPerformed

    private void miNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewCustomerActionPerformed
        // TODO add your handling code here:
        
        newCustomer();
    }//GEN-LAST:event_miNewCustomerActionPerformed

    private void btnEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCustomerActionPerformed
        // TODO add your handling code here:
        
        editCustomer();
    }//GEN-LAST:event_btnEditCustomerActionPerformed

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
        // TODO add your handling code here:
        
        editItem();
    }//GEN-LAST:event_btnEditItemActionPerformed

    private void miTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTestsActionPerformed
        // TODO add your handling code here:
        Test.customers(lists);
        populateTableOfCustomers();
        
        Test.items(lists);
        populateTableOfItems();
        
        Test.invoices(lists);
        populateTableOfInvoices();
    }//GEN-LAST:event_miTestsActionPerformed

    private void btnNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCustomerActionPerformed
        // TODO add your handling code here:
        
        newCustomer();
    }//GEN-LAST:event_btnNewCustomerActionPerformed

    private void btnNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewItemActionPerformed
        // TODO add your handling code here:
        
        newItem();
    }//GEN-LAST:event_btnNewItemActionPerformed

    private void miEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditCustomerActionPerformed
        // TODO add your handling code here:
        
        editCustomer();
    }//GEN-LAST:event_miEditCustomerActionPerformed

    private void miEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditItemActionPerformed
        // TODO add your handling code here:
        
        editItem();
    }//GEN-LAST:event_miEditItemActionPerformed

    private void btnShowInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInvoiceActionPerformed
        // TODO add your handling code here:
        
        showInvoice();
    }//GEN-LAST:event_btnShowInvoiceActionPerformed

    private void btnCreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateInvoiceActionPerformed
        // TODO add your handling code here:
        
        newInvoice();
    }//GEN-LAST:event_btnCreateInvoiceActionPerformed

    public Lists getLists() {
        return lists;
    }

    public void setLists(Lists lists) {
        this.lists = lists;
    }
    
    
    public void deleteRows(DefaultTableModel model){
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }
    
    
    public void populateTableOfCustomers(){
        
        DefaultTableModel model = (DefaultTableModel) tblCustomers.getModel();
        deleteRows(model);
        
        int numberOfColumns = tblCustomers.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Customer> listOfCustomers = this.lists.getListOfCustomers();
        for (int i = 0; i < listOfCustomers.size(); i++) {
            
            rowData[0] = listOfCustomers.get(i).getName();
            rowData[1] = listOfCustomers.get(i).getStreet();
            rowData[2] = listOfCustomers.get(i).getTown();
            rowData[3] = listOfCustomers.get(i).getPostal_code();
            model.addRow(rowData);
        }
    }
    
    public void populateTableOfItems(){
        DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
        deleteRows(model);
        
        int numberOfColumns = tblItems.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Item> listOfItems = this.lists.getListOfItems();
        for (int i = 0; i < listOfItems.size(); i++) {
            
            rowData[0] = listOfItems.get(i).getName();
            rowData[1] = listOfItems.get(i).getDescription();
            rowData[2] = Double.toString(listOfItems.get(i).getPrice());
            model.addRow(rowData);
        }
    }
    
    public void populateTableOfInvoices(){
        DefaultTableModel model = (DefaultTableModel) tblInvoices.getModel();
        deleteRows(model);
        
        int numberOfColumns = tblInvoices.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Invoice> listOfInvoices = this.lists.getListOfInvoices();
        for (int i = 0; i < listOfInvoices.size(); i++) {
            
            rowData[0] = listOfInvoices.get(i).getCustomer().getName();
            rowData[1] = listOfInvoices.get(i).getDate();
            rowData[2] = Double.toString(listOfInvoices.get(i).getSum_items());
            model.addRow(rowData);
        }
    }
    
    public int getRow(JTable table){
        int index = table.getSelectedRow();
        
        if(InputSanitizer.isPositiveInt(index)){
            return index;
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    "Nie je vybraná žiadna položka z tabuľky", 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        }
        return -1;
    }
    
    public void newCustomer(){
        
        AddCustomer frmAC = new AddCustomer(this, this.lists);
        frmAC.setVisible(true);
    }
    
    public void editCustomer(){
        
        int index = getRow(tblCustomers);
        if (InputSanitizer.isPositiveInt(index)){
            
            AddCustomer frmAC = new AddCustomer(this, this.lists, index);
            frmAC.setVisible(true);
        }
    }
    
    public void newItem(){
        
        AddItem frmAI = new AddItem(this, this.lists);
        frmAI.setVisible(true);
    }
    
    public void editItem(){
        
        int index = getRow(tblItems);
        if (InputSanitizer.isPositiveInt(index)){
            
        AddItem frmAI = new AddItem(this, this.lists, index);
        frmAI.setVisible(true);
        }
    }
    
    public void newInvoice(){
        System.out.println("TBA");
    }
    
    public void showInvoice(){
        
        int index = getRow(tblInvoices);
        
        if (InputSanitizer.isPositiveInt(index)) {
            Invoice invoice = lists.getInvoice(index);
            ShowInvoice frmInv = new ShowInvoice(invoice);
            frmInv.setVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateInvoice;
    private javax.swing.JButton btnEditCustomer;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnNewCustomer;
    private javax.swing.JButton btnNewItem;
    private javax.swing.JButton btnShowInvoice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miEditCustomer;
    private javax.swing.JMenuItem miEditItem;
    private javax.swing.JMenuItem miInfo;
    private javax.swing.JMenuItem miNewCustomer;
    private javax.swing.JMenuItem miNewItem;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JMenuItem miTests;
    private javax.swing.JPanel panButtons;
    private javax.swing.JPanel panTables;
    private javax.swing.JPopupMenu.Separator sepFile;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTable tblItems;
    // End of variables declaration//GEN-END:variables
}
