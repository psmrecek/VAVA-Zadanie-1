/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.logic.Customer;
import sk.stu.fiit.logic.InputSanitizer;
import sk.stu.fiit.logic.*;

/**
 *
 * @author PeterSmrecek
 */
public class Main_Window extends javax.swing.JFrame {

    /**
     * Creates new form Main_Window
     */
    public Main_Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        pnlTables = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        pnlAuthor = new javax.swing.JPanel();
        lblMyName = new javax.swing.JLabel();
        tfMyName = new javax.swing.JTextField();
        lblMyStreet = new javax.swing.JLabel();
        tfMyStreet = new javax.swing.JTextField();
        lblMyTown = new javax.swing.JLabel();
        tfMyTown = new javax.swing.JTextField();
        lblMyPostalCode = new javax.swing.JLabel();
        tfMyPostalCode = new javax.swing.JTextField();
        lblDateCreation = new javax.swing.JLabel();
        tfDateCreation = new javax.swing.JTextField();
        lblDueDate = new javax.swing.JLabel();
        tfDueDate = new javax.swing.JTextField();
        pnlButtons = new javax.swing.JPanel();
        btnNewCustomer = new javax.swing.JButton();
        btnEditCustomer = new javax.swing.JButton();
        btnNewItem = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();
        btnCreateInvoice = new javax.swing.JButton();
        btnShowInvoice = new javax.swing.JButton();
        mbMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miNewCustomer = new javax.swing.JMenuItem();
        miNewItem = new javax.swing.JMenuItem();
        miCreateInvoice = new javax.swing.JMenuItem();
        miShowInvoice = new javax.swing.JMenuItem();
        sepFile = new javax.swing.JPopupMenu.Separator();
        miQuit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        miEditCustomer = new javax.swing.JMenuItem();
        miEditItem = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miInfo = new javax.swing.JMenuItem();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fakturačný systém");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(760, 790));
        setPreferredSize(new java.awt.Dimension(760, 790));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        pnlMain.setMinimumSize(new java.awt.Dimension(740, 710));
        pnlMain.setPreferredSize(new java.awt.Dimension(750, 710));
        pnlMain.setLayout(new java.awt.GridBagLayout());

        pnlTables.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka tovarov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 10))); // NOI18N
        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jScrollPane1.setMinimumSize(new java.awt.Dimension(740, 170));
        jScrollPane1.setOpaque(false);

        tblItems.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Názov", "Popis", "Cena", "Množstvo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItems.setMinimumSize(new java.awt.Dimension(740, 170));
        tblItems.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblItems);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlTables.add(jScrollPane1, gridBagConstraints);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka faktúr", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 10))); // NOI18N
        jScrollPane3.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jScrollPane3.setMinimumSize(new java.awt.Dimension(740, 170));

        tblInvoices.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Dátum vytvorenia", "Dátum splatnosti", "Suma"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInvoices.setMinimumSize(new java.awt.Dimension(740, 170));
        tblInvoices.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblInvoices);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlTables.add(jScrollPane3, gridBagConstraints);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka zákazníkov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 10))); // NOI18N
        jScrollPane2.setMinimumSize(new java.awt.Dimension(740, 170));

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Adresa", "Obec", "PSČ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomers.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblCustomers);

        pnlTables.add(jScrollPane2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        pnlMain.add(pnlTables, gridBagConstraints);

        pnlAuthor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Údaje o autorovi faktúry a dátumy", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 10))); // NOI18N
        pnlAuthor.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        pnlAuthor.setMinimumSize(new java.awt.Dimension(740, 150));
        java.awt.GridBagLayout pnlAuthorLayout = new java.awt.GridBagLayout();
        pnlAuthorLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        pnlAuthorLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        pnlAuthor.setLayout(pnlAuthorLayout);

        lblMyName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblMyName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMyName.setText("Meno");
        lblMyName.setMinimumSize(new java.awt.Dimension(120, 30));
        lblMyName.setName(""); // NOI18N
        lblMyName.setPreferredSize(new java.awt.Dimension(150, 30));
        lblMyName.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        pnlAuthor.add(lblMyName, gridBagConstraints);

        tfMyName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tfMyName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfMyName.setText("Sem zadajte meno autora");
        tfMyName.setMinimumSize(new java.awt.Dimension(200, 30));
        tfMyName.setName(""); // NOI18N
        tfMyName.setPreferredSize(new java.awt.Dimension(220, 30));
        tfMyName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfMyNameFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        pnlAuthor.add(tfMyName, gridBagConstraints);

        lblMyStreet.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblMyStreet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMyStreet.setText("Ulica a číslo");
        lblMyStreet.setMinimumSize(new java.awt.Dimension(120, 30));
        lblMyStreet.setName(""); // NOI18N
        lblMyStreet.setPreferredSize(new java.awt.Dimension(150, 30));
        lblMyStreet.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        pnlAuthor.add(lblMyStreet, gridBagConstraints);

        tfMyStreet.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tfMyStreet.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfMyStreet.setText("Sem zadajte ulicu a číslo autora");
        tfMyStreet.setMinimumSize(new java.awt.Dimension(200, 30));
        tfMyStreet.setName(""); // NOI18N
        tfMyStreet.setPreferredSize(new java.awt.Dimension(220, 30));
        tfMyStreet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfMyStreetFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        pnlAuthor.add(tfMyStreet, gridBagConstraints);

        lblMyTown.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblMyTown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMyTown.setText("Obec");
        lblMyTown.setMinimumSize(new java.awt.Dimension(120, 30));
        lblMyTown.setName(""); // NOI18N
        lblMyTown.setPreferredSize(new java.awt.Dimension(150, 30));
        lblMyTown.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        pnlAuthor.add(lblMyTown, gridBagConstraints);

        tfMyTown.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tfMyTown.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfMyTown.setText("Sem zadajte obec autora");
        tfMyTown.setMinimumSize(new java.awt.Dimension(200, 30));
        tfMyTown.setName(""); // NOI18N
        tfMyTown.setPreferredSize(new java.awt.Dimension(220, 30));
        tfMyTown.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfMyTownFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        pnlAuthor.add(tfMyTown, gridBagConstraints);

        lblMyPostalCode.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblMyPostalCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMyPostalCode.setText("PSČ");
        lblMyPostalCode.setMinimumSize(new java.awt.Dimension(120, 30));
        lblMyPostalCode.setName(""); // NOI18N
        lblMyPostalCode.setPreferredSize(new java.awt.Dimension(150, 30));
        lblMyPostalCode.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        pnlAuthor.add(lblMyPostalCode, gridBagConstraints);

        tfMyPostalCode.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tfMyPostalCode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfMyPostalCode.setText("Sem zadajte PSČ autora");
        tfMyPostalCode.setMinimumSize(new java.awt.Dimension(200, 30));
        tfMyPostalCode.setName(""); // NOI18N
        tfMyPostalCode.setPreferredSize(new java.awt.Dimension(220, 30));
        tfMyPostalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfMyPostalCodeFocusGained(evt);
            }
        });
        tfMyPostalCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMyPostalCodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        pnlAuthor.add(tfMyPostalCode, gridBagConstraints);

        lblDateCreation.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblDateCreation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDateCreation.setText("Dátum vystavenia");
        lblDateCreation.setMinimumSize(new java.awt.Dimension(120, 30));
        lblDateCreation.setName(""); // NOI18N
        lblDateCreation.setPreferredSize(new java.awt.Dimension(150, 30));
        lblDateCreation.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        pnlAuthor.add(lblDateCreation, gridBagConstraints);

        tfDateCreation.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tfDateCreation.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDateCreation.setText("Sem zadajte dátum vystavenia");
        tfDateCreation.setMinimumSize(new java.awt.Dimension(200, 30));
        tfDateCreation.setName(""); // NOI18N
        tfDateCreation.setPreferredSize(new java.awt.Dimension(220, 30));
        tfDateCreation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfDateCreationFocusGained(evt);
            }
        });
        tfDateCreation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDateCreationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        pnlAuthor.add(tfDateCreation, gridBagConstraints);

        lblDueDate.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblDueDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDueDate.setText("Dátum splatnosti");
        lblDueDate.setMinimumSize(new java.awt.Dimension(120, 30));
        lblDueDate.setName(""); // NOI18N
        lblDueDate.setPreferredSize(new java.awt.Dimension(150, 30));
        lblDueDate.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        pnlAuthor.add(lblDueDate, gridBagConstraints);

        tfDueDate.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tfDueDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDueDate.setText("Sem zadajte dátum splatnosti");
        tfDueDate.setMinimumSize(new java.awt.Dimension(200, 30));
        tfDueDate.setName(""); // NOI18N
        tfDueDate.setPreferredSize(new java.awt.Dimension(220, 30));
        tfDueDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfDueDateFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        pnlAuthor.add(tfDueDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        pnlMain.add(pnlAuthor, gridBagConstraints);

        pnlButtons.setLayout(new javax.swing.BoxLayout(pnlButtons, javax.swing.BoxLayout.LINE_AXIS));

        btnNewCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnNewCustomer.setText("Nový zákazník");
        btnNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCustomerActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNewCustomer);

        btnEditCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditCustomer.setText("Úprava zákazníka");
        btnEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCustomerActionPerformed(evt);
            }
        });
        pnlButtons.add(btnEditCustomer);

        btnNewItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnNewItem.setText("Nový tovar");
        btnNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewItemActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNewItem);

        btnEditItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditItem.setText("Úprava tovaru");
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });
        pnlButtons.add(btnEditItem);

        btnCreateInvoice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCreateInvoice.setText("Vytvoriť faktúru");
        btnCreateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateInvoiceActionPerformed(evt);
            }
        });
        pnlButtons.add(btnCreateInvoice);

        btnShowInvoice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnShowInvoice.setText("Zobraziť faktúru");
        btnShowInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInvoiceActionPerformed(evt);
            }
        });
        pnlButtons.add(btnShowInvoice);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        pnlMain.add(pnlButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(pnlMain, gridBagConstraints);

        menuFile.setText("Súbor");

        miNewCustomer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miNewCustomer.setText("Nový zákazník");
        miNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewCustomerActionPerformed(evt);
            }
        });
        menuFile.add(miNewCustomer);

        miNewItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miNewItem.setText("Nový tovar");
        miNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewItemActionPerformed(evt);
            }
        });
        menuFile.add(miNewItem);

        miCreateInvoice.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miCreateInvoice.setText("Nová faktúra");
        miCreateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCreateInvoiceActionPerformed(evt);
            }
        });
        menuFile.add(miCreateInvoice);

        miShowInvoice.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miShowInvoice.setText("Zobraziť faktúru");
        miShowInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miShowInvoiceActionPerformed(evt);
            }
        });
        menuFile.add(miShowInvoice);
        menuFile.add(sepFile);

        miQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miQuit.setText("Koniec");
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitActionPerformed(evt);
            }
        });
        menuFile.add(miQuit);

        mbMain.add(menuFile);

        menuEdit.setText("Úpravy");

        miEditCustomer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miEditCustomer.setText("Úprava zákazníka");
        miEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditCustomerActionPerformed(evt);
            }
        });
        menuEdit.add(miEditCustomer);

        miEditItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miEditItem.setText("Úprava tovaru");
        miEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditItemActionPerformed(evt);
            }
        });
        menuEdit.add(miEditItem);

        mbMain.add(menuEdit);

        menuHelp.setText("Pomocník");

        miInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miInfo.setText("Návod");
        miInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInfoActionPerformed(evt);
            }
        });
        menuHelp.add(miInfo);

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        menuHelp.add(miAbout);

        mbMain.add(menuHelp);

        setJMenuBar(mbMain);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private Lists lists = new Lists();
    
    private void miQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
        // TODO add your handling code here:
        
        
        int result = JOptionPane.showConfirmDialog(rootPane, 
                "Naozaj si prajete ukončiť aplikáciu?", "Koniec", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if (result == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_miQuitActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        // TODO add your handling code here:
        
        About frmAbout = new About();
        frmAbout.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    private void miNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewItemActionPerformed
        // TODO add your handling code here:
        
        newItem();
    }//GEN-LAST:event_miNewItemActionPerformed

    private void miInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInfoActionPerformed
        // TODO add your handling code here:
        
        Info frmInfo = new Info();
        frmInfo.setVisible(true);
    }//GEN-LAST:event_miInfoActionPerformed

    private void miNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewCustomerActionPerformed
        // TODO add your handling code here:
        
        newCustomer();
    }//GEN-LAST:event_miNewCustomerActionPerformed

    private void miEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditCustomerActionPerformed
        // TODO add your handling code here:
        
        editCustomer();
    }//GEN-LAST:event_miEditCustomerActionPerformed

    private void miEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditItemActionPerformed
        // TODO add your handling code here:
        
        editItem();
    }//GEN-LAST:event_miEditItemActionPerformed

    private void miShowInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miShowInvoiceActionPerformed
        // TODO add your handling code here:
        
        showInvoice();
    }//GEN-LAST:event_miShowInvoiceActionPerformed

    private void miCreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCreateInvoiceActionPerformed
        // TODO add your handling code here:
        
        newInvoice();
    }//GEN-LAST:event_miCreateInvoiceActionPerformed

    private void btnShowInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInvoiceActionPerformed
        // TODO add your handling code here:

        showInvoice();
    }//GEN-LAST:event_btnShowInvoiceActionPerformed

    private void btnCreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateInvoiceActionPerformed
        // TODO add your handling code here:

        newInvoice();
    }//GEN-LAST:event_btnCreateInvoiceActionPerformed

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
        // TODO add your handling code here:

        editItem();
    }//GEN-LAST:event_btnEditItemActionPerformed

    private void btnNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewItemActionPerformed
        // TODO add your handling code here:

        newItem();
    }//GEN-LAST:event_btnNewItemActionPerformed

    private void btnEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCustomerActionPerformed
        // TODO add your handling code here:

        editCustomer();
    }//GEN-LAST:event_btnEditCustomerActionPerformed

    private void btnNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCustomerActionPerformed
        // TODO add your handling code here:

        newCustomer();
    }//GEN-LAST:event_btnNewCustomerActionPerformed

    private void tfDueDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfDueDateFocusGained
        // TODO add your handling code here:

        tfDueDate.selectAll();
    }//GEN-LAST:event_tfDueDateFocusGained

    private void tfDateCreationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfDateCreationFocusGained
        // TODO add your handling code here:

        tfDateCreation.selectAll();
    }//GEN-LAST:event_tfDateCreationFocusGained

    private void tfMyPostalCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMyPostalCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfMyPostalCodeActionPerformed

    private void tfMyPostalCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMyPostalCodeFocusGained
        // TODO add your handling code here:

        tfMyPostalCode.selectAll();
    }//GEN-LAST:event_tfMyPostalCodeFocusGained

    private void tfMyTownFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMyTownFocusGained
        // TODO add your handling code here:

        tfMyTown.selectAll();
    }//GEN-LAST:event_tfMyTownFocusGained

    private void tfMyStreetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMyStreetFocusGained
        // TODO add your handling code here:

        tfMyStreet.selectAll();
    }//GEN-LAST:event_tfMyStreetFocusGained

    private void tfMyNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMyNameFocusGained
        // TODO add your handling code here:

        tfMyName.selectAll();
    }//GEN-LAST:event_tfMyNameFocusGained

    private void tfDateCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDateCreationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDateCreationActionPerformed

    public Lists getLists() {
        return lists;
    }

    public void setLists(Lists lists) {
        this.lists = lists;
    }
    
    
    public void deleteRows(DefaultTableModel model){
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }
    
    
    public void populateTableOfCustomers(){
        DefaultTableModel model = (DefaultTableModel) tblCustomers.getModel();
        deleteRows(model);
        
        int numberOfColumns = tblCustomers.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Customer> listOfCustomers = this.lists.getListOfCustomers();
        for (int i = 0; i < listOfCustomers.size(); i++) {
            
            rowData[0] = listOfCustomers.get(i).getName();
            rowData[1] = listOfCustomers.get(i).getStreet();
            rowData[2] = listOfCustomers.get(i).getTown();
            rowData[3] = listOfCustomers.get(i).getPostal_code();
            model.addRow(rowData);
        }
    }
    
    public void populateTableOfItems(){
        DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
        deleteRows(model);
        
        int numberOfColumns = tblItems.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Item> listOfItems = this.lists.getListOfItems();
        for (int i = 0; i < listOfItems.size(); i++) {
            
            rowData[0] = listOfItems.get(i).getName();
            rowData[1] = listOfItems.get(i).getDescription();
            rowData[2] = listOfItems.get(i).getPrice_string();
            model.addRow(rowData);
        }
    }
    
    public void populateTableOfInvoices(){
        DefaultTableModel model = (DefaultTableModel) tblInvoices.getModel();
        deleteRows(model);
        
        int numberOfColumns = tblInvoices.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Invoice> listOfInvoices = this.lists.getListOfInvoices();
        for (int i = 0; i < listOfInvoices.size(); i++) {
            
            rowData[0] = listOfInvoices.get(i).getCustomer().getName();
            rowData[1] = listOfInvoices.get(i).getDateCreation();
            rowData[2] = listOfInvoices.get(i).getDueDate();
            rowData[3] = listOfInvoices.get(i).getSum_items_string();
            model.addRow(rowData);
        }
    }
    
    public int getRow(JTable table){
        int index = table.getSelectedRow();
        
        if(InputSanitizer.isPositiveInt(index)){
            return index;
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    "Nie je vybraná žiadna položka z tabuľky", 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        }
        return -1;
    }
    
    public int getRow(JTable table, String message){
        int index = table.getSelectedRow();
        
        if(InputSanitizer.isPositiveInt(index)){
            return index;
        } else {
            JOptionPane.showMessageDialog(rootPane, 
                    message, 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        }
        return -1;
    }
    
    public void newCustomer(){
        
        AddCustomer frmAC = new AddCustomer(this, this.lists);
        frmAC.setVisible(true);
    }
    
    public void editCustomer(){
        
        int index = getRow(tblCustomers, "Nie je vybraný žiaden zákazník z tabuľky");
        if (InputSanitizer.isPositiveInt(index)){
            
            AddCustomer frmAC = new AddCustomer(this, this.lists, index);
            frmAC.setVisible(true);
        }
    }
    
    public void newItem(){
        
        AddItem frmAI = new AddItem(this, this.lists);
        frmAI.setVisible(true);
    }
    
    public void editItem(){
        
        int index = getRow(tblItems, "Nie je vybraný žiaden tovar z tabuľky");
        if (InputSanitizer.isPositiveInt(index)){
            
            AddItem frmAI = new AddItem(this, this.lists, index);
            frmAI.setVisible(true);
        }
    }
    
    public void newInvoice(){
        
        int indexCustomer = getRow(tblCustomers, "Nie je vybraný žiaden zákazník z tabuľky");
        Customer customer;
        if (InputSanitizer.isPositiveInt(indexCustomer)){
            customer = lists.getCustomer(indexCustomer);
        } else{
            return;
        }
        
        ArrayList<Item> subListOfItems = new ArrayList<Item>();
        ArrayList<Integer> listOfQty = new ArrayList<Integer>();
        String dateCreation = tfDateCreation.getText();
        String dueDate = tfDueDate.getText();
        String name = tfMyName.getText();
        String street = tfMyStreet.getText();
        String postal_code = tfMyPostalCode.getText();
        String town =  tfMyTown.getText();
        
        if(InputSanitizer.emptyString(name) || 
                InputSanitizer.emptyString(street) || 
                InputSanitizer.emptyString(town) || 
                InputSanitizer.emptyString(postal_code)){
            JOptionPane.showMessageDialog(rootPane, 
                    "Žiadne pole z údajov o autorovi faktúry nesmie zostať prázdne!", 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!(InputSanitizer.validDate(dateCreation)) || !(InputSanitizer.validDate(dueDate))){
            JOptionPane.showMessageDialog(rootPane, 
                    "Zadávaný dátum musí byť vo formáte \"dd.mm.yyyy\"!", 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Object quantityObj = model.getValueAt(i, 3);
 
            try {
                int quantity = InputSanitizer.validQuantity(quantityObj);
                if(quantity > 0){
                    subListOfItems.add(lists.getItem(i));
                    listOfQty.add(quantity);
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, 
                    "Hodnota v stĺpci Množstvo v tabuľke tovarov môže byť len celé kladné číslo a nula", 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(subListOfItems.size() == 0){
            JOptionPane.showMessageDialog(rootPane, 
                    "Aspoň jeden tovar musí mať nenulové množstvo", 
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        } else{
            lists.creaiteInvoice(dateCreation, dueDate, customer, subListOfItems, listOfQty, name, street, town, postal_code);
            populateTableOfInvoices();
            
        }
    }
    
    public void showInvoice(){
        
        int index = getRow(tblInvoices);
        
        if (InputSanitizer.isPositiveInt(index)) {
            Invoice invoice = lists.getInvoice(index);
            ShowInvoice frmInv = new ShowInvoice(invoice);
            frmInv.setVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateInvoice;
    private javax.swing.JButton btnEditCustomer;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnNewCustomer;
    private javax.swing.JButton btnNewItem;
    private javax.swing.JButton btnShowInvoice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDateCreation;
    private javax.swing.JLabel lblDueDate;
    private javax.swing.JLabel lblMyName;
    private javax.swing.JLabel lblMyPostalCode;
    private javax.swing.JLabel lblMyStreet;
    private javax.swing.JLabel lblMyTown;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miCreateInvoice;
    private javax.swing.JMenuItem miEditCustomer;
    private javax.swing.JMenuItem miEditItem;
    private javax.swing.JMenuItem miInfo;
    private javax.swing.JMenuItem miNewCustomer;
    private javax.swing.JMenuItem miNewItem;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JMenuItem miShowInvoice;
    private javax.swing.JPanel pnlAuthor;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTables;
    private javax.swing.JPopupMenu.Separator sepFile;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTable tblItems;
    private javax.swing.JTextField tfDateCreation;
    private javax.swing.JTextField tfDueDate;
    private javax.swing.JTextField tfMyName;
    private javax.swing.JTextField tfMyPostalCode;
    private javax.swing.JTextField tfMyStreet;
    private javax.swing.JTextField tfMyTown;
    // End of variables declaration//GEN-END:variables
}
